Program -> Statements
Statements -> #RECORD_STACK Statement #PRUNE_STACK ; Statements
Statements -> EPSILON
Statement -> Compound_stmt
Statement -> Simple_stmt
Simple_stmt -> Assignment_Call
Simple_stmt -> Return_stmt
Simple_stmt -> Global_stmt
Simple_stmt -> break #APPEND_BREAK_PB
Simple_stmt -> continue #APPEND_CONT_PB
Simple_stmt -> print ( Atom #PRINT ) 
Compound_stmt -> Function_def
Compound_stmt -> If_stmt
Compound_stmt -> Iteration_stmt
Assignment_Call -> ID B
B -> #PID = C
B -> #PID2 [ #SET_PT Expression #MOVE_PT ] = C
B -> #PID2 #CALL ( Arguments ) #JP_FUNC
C -> Expression #ASSIGN
C -> [ #CREATE_P Expression #ASSIGN2 List_Rest ]
List_Rest -> , Expression #ASSIGN2 List_Rest
List_Rest -> EPSILON #POP #GIVE_BACK
Return_stmt -> return Return_Value
Return_Value -> Expression #SET_RET_VAL
Return_Value -> EPSILON #SET_RET_VAL2
Global_stmt -> global ID
Function_def -> def ID #CHG_SCOPE ( Params ) : Statements #END_FUNC
Params -> ID #NARG Params_Prime
Params -> EPSILON
Params_Prime -> , ID #NARG Params_Prime
Params_Prime -> EPSILON
If_stmt -> if Relational_Expression #SAVE : Statements #SAVE Else_block #SAVE_JPT
Else_block -> else #SAVE_JPF : Statements
Else_block -> EPSILON #SAVE_JPF
Iteration_stmt -> #WHILE_JPB while #ITMT_ATTR ( Relational_Expression ) #SAVE Statements #SAVE_WHILE
Relational_Expression -> Expression Relop Expression #SET_RELOP
Relop -> == #RELOP0
Relop -> < #RELOP1
Expression -> Term Expression_Prime
Expression_Prime -> + Term #ADD Expression_Prime
Expression_Prime -> - Term #SUB Expression_Prime
Expression_Prime -> EPSILON
Term -> Factor Term_Prime
Term_Prime -> * Factor #MULT Term_Prime
Term_Prime -> EPSILON
Factor -> Atom Power
Power -> ** #POW_USED Factor
Power -> Primary
Primary -> [ #SET_PT Expression #MOVE_PT ] Primary
Primary -> #CALL ( Arguments ) #JP_FUNC Primary
Primary -> EPSILON
Arguments -> Expression #ASSIGN Arguments_Prime
Arguments -> EPSILON
Arguments_Prime -> , Expression #ASSIGN Arguments_Prime
Arguments_Prime -> EPSILON
Atom -> ID #PID2
Atom -> NUM #PNUM